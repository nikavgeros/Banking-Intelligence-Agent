from langchain_core.runnables import Runnable
from langgraph.graph.message import AnyMessage, add_messages
from typing import Annotated
from typing_extensions import TypedDict
from langchain_core.runnables import RunnableConfig


class State(TypedDict):
    messages: Annotated[list[AnyMessage], add_messages]
    user_info: str


class Assistant:
    """
    A class representing an AI assistant that uses a Runnable object to process states
    and return results.
    """

    def __init__(self, runnable: Runnable):
        self.runnable = runnable

    def __call__(self, state: State, config: RunnableConfig):
        """
        Processes a given state with the assistant and ensures valid responses.

        Args:
            state (State): The current state of the dialog.
            config (RunnableConfig): Configuration for the Runnable object.

        Returns:
            dict: A dictionary containing messages generated by the assistant.
        """
        while True:
            result = self.runnable.invoke(state)
            # If the LLM happens to return an empty response, re-prompt it
            if not result.tool_calls and (
                not result.content or isinstance(result.content, list) and not result.content[0].get("text")
            ):
                messages = state["messages"] + [("user", "Respond with a real output.")]
                state = {**state, "messages": messages}
            else:
                break
        return {"messages": result}
